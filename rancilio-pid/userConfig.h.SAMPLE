/********************************************************
 * Version 2.7.0
 * Config must be configured by the user
 *****************************************************/

#ifndef _userConfig_H
#define _userConfig_H

/********************************************************
 * General settings
 *****************************************************/
#define MACHINE_TYPE "rancilio"  // supported values are "rancilio", "gaggia" and "ecm".

#define FORCE_OFFLINE 0       // 0=Use network | 1=Disable all network stuff (WiFi, MQTT, Blynk).
#define DISABLE_SERVICES_ON_STARTUP_ERRORS 1 // 1=on (default) when a service cannot be connected during startup, never retry | 0=off Try reconnecting to service during regular operations.
#define ONLYPID 1             // 1=Only PID with no Preinfussion | 0=PID + Preinfussion
#define TEMPSENSOR 2          // 1=DS19B20; 2=TSIC306. It is not recommended to use DS19B20 due to latencies.
#define TEMPSENSORRECOVERY 0  // 1 = on, 2= off (default). If off, temp sensor errors will stop the heater until power cycle
#define TRIGGERTYPE HIGH      // LOW = low trigger, HIGH = high trigger relay
#define OTA true              // true=activate update via OTA
#define GRAFANA 0             // 0=default(off), 1=enable grafana visualisation by Markus (simply ask him for free access)
#define EMERGENCY_TEMP 135    // If temperature is higher then notifications are send via display/debug/mqtt and PID is temporary disabled.
                              // Set this to the higest temperature supported by your maschine minus a few degress. (Silvia 5E: 135)

#define BREWTIME        30.0  // length of time of the brewing (in sec). Used to limit brew time via hardware (ONLYPID=0) or visually (ONLYPID=1).

#define BREWDETECTION 2               // 0 = off | 1 = on using Hardware (ONLYPID=0 or ONLYPID=1_using_ControlAction_BREWING) | 2 = on using Software (ONLYPID=1 auto-detection)
#define BREWDETECTION_SENSITIVITY 0.6 // If temperature drops in the past 3 seconds by this number (Celcius), then a brew is detected (BREWDETECTION must be 1)
#define BREWDETECTION_WAIT 90         // (ONLYPID=1) 50=default: Software based BrewDetection is disabled after brewing for this number (seconds)
#define BREWDETECTION_POWER 50        // heater utiilization (in percent) during brew (BREWDETECTION must be 1)

#define BREW_READY_DETECTION 0.3      // 0=off | 0.x=If measured temperature of the last 60 seconds has been within this defined margin around the SET_POINT, we are able to brew. (recommended value 0.3)
#define ENABLE_HARDWARE_LED 0         // 0=off | 1=Single LED | 2=WS2812b - LEDs at GPO pinLed will lighten when BREW_READY_DETECTION triggers or temperature>SETPOINT_STEAM
#define ENABLE_HARDWARE_LED_NUMBER 0  // 0=off | (ENABLE_HARDWARE_LED=2) Number of WS2812b-based LEDs connected

//#define DEBUGMODE               // to enable Debug uncomment this line. Afterwards you can connect via telnet to pot 23 to see debug logs.

/*******
 * Hardware GPIO Pin Mapping (just change values but don't comment)
 * OLED Display: SDA GPIO01, SCK GPIO22 // Info only
 *******/
#define pinTemperature    17    // read temperature (TSIC)  //sure to use this one, its allready used in BREW function
#define pinRelayHeater    27   // trigger relais used to heat water
#define pinRelayVentil    12   // (ONLYPID=0) trigger relais used to open (three-way) valve
#define pinRelayPumpe     13   // (ONLYPID=0) trigger relais used to activate the water pump

#define pinLed            23   // (ENABLE_HARDWARE_LED=1) Hardware LED (16 is also "free" to use)

/*******
 * GPIO Pin Usage: Here you can define how the GPIO boards (analog/digital) shall be used to execute functions.
 *
 * Parsing rules:
 *  - left to right: First ACTION_BLOCK which matches the gpio-value is executed and following actions ignored
 *  - gpio-values not matching any ACTION_BLOCKs are ignored
 *
 * Format of CONTROLS_CONFIG:
 *  CONTROLS_CONFIG = "<GPIO_CONFIG_BLOCK_1>#<GPIO_CONFIG_BLOCK_2>#<unlimited number of blocks>"
 *     GPIO_CONFIG_BLOCK_1 = "<GPIO_Number>:<INPUT_PULLDOWN|INPUT_PULLUP|INPUT>:<analog|digital>:<toggle|trigger>|<ACTION_BLOCK_1>;<ACTION_BLOCK_2>;<unlimited number of blocks>"
 *        GPIO number: ESP8266/nodemcu: A0 = 17 && esp32: https://randomnerdtutorials.com/esp32-pinout-reference-gpios/
 *        "toggle" keeps its state and "trigger" only shortly changes its state before it resets.
 *        ACTION_BLOCK = "<lowerBoundary>-<upperBoundary>:<ACTION>"
 *            ACTION = BREWING|HOTWATER|STEAMING|PUMP|VALVE|... (see controls.h for a full list of supported actions)
 *
 *
 *    Examples:
 *    a) Hardware Switch (On/Off) on A0(GPIO17) which controls BREWING when gpio-value >= 700.
 *    #define CONTROLS_CONFIG "17:INPUT:analog:toggle|700-1024:BREWING#"
 *
 *    b) Hardware Buttons via eg. resistance network which is capably of delivering multiple distinct values for the ADC.
 *    #define CONTROLS_CONFIG "17:INPUT:analog:trigger|90-130:BREWING;270-320:STEAMING;390-420:HOTWATER#16:digital:trigger|0-0:BREWING#"
 *
 *    c) Hardware Switches via eg. resistance network which is capably of delivering multiple distinct values for the ADC.
 *    #define CONTROLS_CONFIG "17:INPUT:analog:toggle|245-260:BREWING;525-540:STEAMING;802-815:HOTWATER#"
 *
 *    d) Hardware Switch (On/Off) (GPIO02) which controls BREWING - Hardware Switch (On/Off) on GPIO32 which controls HOTWATER - Hardware Switch (On/Off) on GPIO33 which controls STEAMING -- all without an resistor (direct connected, uses internal resistor)
 *    #define CONTROLS_CONFIG "2:INPUT_PULLUP:digital:toggle|0-0:BREWING#32:INPUT_PULLUP:digital:toggle|0-0:HOTWATER#33:INPUT_PULLUP:digital:toggle|0-0:STEAMING#"
 *******/
#define DEBUG_FORCE_GPIO_CHECK   0  // 0=off (default). 1=on. If on, PID is disabled and only trigger/toogles are detected and printed in DEBUG log.
#define CONTROLS_CONFIG "17:INPUT:analog:toggle|700-1024:BREWING#"  //when a simple switch is connected on port A0 and this switch is used to trigger BREWING.

/*******
 * Display Settings
 *******/
#define DISPLAY 0                         // 0=Deaktiviert, 1=SH1106_128X64, 2=SSD1306_128X64
#define ROTATE_DISPLAY 0                  // 0=Off (Default), 1=180 degree clockwise rotation
#define ICON_COLLECTION 0                 // 0:="simple", 1:="smiley", 2:="winter"
#define DISPLAY_TEXT "Bleeding-Edge PID"  // Text is displayed on bootup (max 21 chars)
//#define OVERWRITE_VERSION_DISPLAY_TEXT "" // Text is displayed on bootup one line below DISPLAY_TEXT (max 21 chars)
#define ENABLE_FAILURE_STATUS_ICONS 1     // 1 = on (default), 0 = off. If enabled show status icons if services are offline.
#define ENABLE_SCREEN_SAVER 3             // 0=Disable, 1=Enable(blank screen), 2=Enable(use BrewReady Collection Icon), 3=Enable(Use Maschine logo)
#define ENABLE_POWER_OFF_COUNTDOWN 0      // 0 = off (default) | 1...n If maschine is inactive for this amount of seconds, we expect the maschine
                                          // to shutdown (Silvia 5E: 1800). Show countdown for the last 3 minutes.
#define STEAM_READY_TEMP 116              // (display only) if temperature is higher then this value then the steam-ready icon is shown
                                          // (Rancilio: 116, ECM Casa Prima: 130?, ...)

/*******
 * General PID values
 *******/
#define STEADYPOWER 4.6 // Constant power of heater to accomodate against loss of heat to environment (in %)
                        // (Rancilio Silvia 5E: 4.6 , ...)
#define STEADYPOWER_OFFSET_TIME 850   // If brew group is very cold, we need to put additional power to the heater:
                                      // How long should this additional power be delivered (in s) (Rancilio Silvia 5E: 850, ...)
#define STEADYPOWER_OFFSET 3.0        // How much power should be added? (in %) (Rancilio Silvia 5E: 2.9, ...)

#define SETPOINT 93           // Temperature SetPoint
#define SETPOINT_STEAM 118    // Steam Temperature SetPoint (Rancilio: 118, ECM Casa Prima: 145, ...)
#define STARTTEMP 80.6        // If temperature is below this value then Coldstart state should be triggered
                              // (Rancilio Silvia 5E: 80.6 , ...)

// Inner Zone PID values
#define AGGKP 80        // Kp (Rancilio Silvia 5E: 80, ...)
#define AGGTN 11        // Tn (Rancilio Silvia 5E: 11, ...)
#define AGGTV 32        // Tv (Rancilio Silvia 5E: 32, ...)

// Outer Zone PID values
#define AGGOKP 170      // Kp (Rancilio Silvia 5E: 170, ...)
#define AGGOTN 40       // Tn (Rancilio Silvia 5E: 40, ...)
#define AGGOTV 40       // Tv (Rancilio Silvia 5E: 40, ...)

/*******
 * Preinfussion settings (only useful when ONLYPID=0)
 *******/
#define PREINFUSION       2.6   //  length of time of the pre-infusion (in sec). Set to "0" to disable pre-infusion.
#define PREINFUSION_PAUSE 3.3     // length of time of the pre-infusion pause (time in between the pre-infussion and brewing) (in sec). Set to "0" to disable pre-infusion pause.
// dont forget to adapt BREWTIME mentioned above


/*******
 * networking and services
 *******/
// Wifi
#define HOSTNAME "rancilio"
#define D_SSID "wlanname"
#define PASS "wlanpass"
//#define STATIC_IP ip(192, 168, x, y);            //uncomment and set this to your network to force static IP
//#define STATIC_GATEWAY gateway(192, 168, x, 1);  //uncomment and set this to your network to force static IP
//#define STATIC_SUBNET subnet(255,255,255,0);     //uncomment and set this to your network to force static IP

// OTA
#define OTAPASS "otapassBleedingEdge"    // Password for OTA updates

// Blynk
#define BLYNK_ENABLE 0       // 1=on (Blynk PID values overwrite userConfig.h settings) | 0=off (default)
#define BLYNKAUTH "blynkauthcode"
#define BLYNKADDRESS "any.blynk.server.adress"   // IP-Address of locally installed blynk server
#define BLYNKPORT 8080

// MQTT
#define MQTT_ENABLE 2        // 0 = off (no MQTT at all) | 1=MQTT client  | 2=MQTT Server if you dont have a mqtt server running on another system)
#define MQTT_USERNAME "myuser"
#define MQTT_PASSWORD "mypass"
#define MQTT_TOPIC_PREFIX "custom/Küche."  // topic will be "<MQTT_TOPIC_PREFIX><HOSTNAME>/<READING>" <HOSTNAME> is defined in //Wifi section
#define MQTT_SERVER_IP "192.168.x.x"       // (MQTT_ENABLE=1) IP-Address of locally installed mqtt server
#define MQTT_SERVER_PORT 1883              // (MQTT_ENABLE=1)

#endif // _userConfig_H
